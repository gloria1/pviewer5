


next:
	add display mechanics for groups
	add handling for IP4 fragments		
	collect list of unhandled cases







stages of loading a capture file

	0) load raw packets from file, parse all headers possible

	1) if parsing an ip header finds that this is a fragment, group with other ip datagram fragments
		- this is a special case because the result is treated as a single packet downstream
		- how to test?  --> use sample from Practical Packet Analysis
		- maybe this should happen automatically on reading the file
			- create dictionary of pointers to "agg packets" keyed by ip sequence number
			- the "agg packet" is a packet with the layer 2 and ip header information populated so it will look like a single packet downstream
			- for each new fragment, add the data to its "agg packet" (expanding the data array if necessary)
			- for each "agg packet" keep a list of "extents" which are pairs of (offset,length)
				- detect duplicate fragments
				- detect missing fragments
					- handle case where never see the fragment with MF=0, so don't know the full length
			- when a datagram is re-assembled, remove from dictionary, parse higher layer headers, and add to main packet list using max timestamp
			- report missing fragments 
		- make the aggregated datagram appear to be a single packet, using max of timestamps of fragments (that would be the time it is available to upstream)
		- flag to indicate whether missing fragments
		- pointer to list of raw packets (or drop the raw fragments??)


	2) group based on protocol

			- each protocol header has a method for incorporating a new packet into its groups
			- for each packet, look for the highest layer protocol and try the associated grouping function
				- eventually will add user options to control which protocols to group for
				- if that function returns false (indicating packet not accepted into group), notify user - this shoudl never happen

			- protocols that should be mutually exclusive of each others within same layer i.e., a packet belongs to one and only one of these protocols
			- this pass will result in a list of groups that are individual "conversations", e.g., an arp handshake, a udp sende/receiver pair or a tcp session
			- plus a list of ungrouped packets (if nothing else, due to protocols not handled yet)

			- properties of group list members:
				- "group protocol" - the protocol that is the basis for defining this group
					- from protocols enum 
					- but with another item for "ungrouped", to indicate ungrouped packets
				- group header
					- same type as regular protocol header, but only populated with the values that determine group membership
					- or null for "ungrouped"
				- first/last timestamp
				- completeness flag (? or shoudl this just be the result of a method?)
				- list of members (references to other groups or individual packets)


	2.5) groups within groups - not clear yet whether this will be necessary or useful


	3) have methods to test each group for 
			- completeness
			- corruption
			- anomalies












workflow, ui and backing data

	1) make loading a file a distinct operation, which parses all packets and puts them into a single list (and applies quickfilter, which will create a second list temporarily while i test it)
	2) application of packet sets creates a set of pointers into the master packet list
	3) doing the "group into convos" operation creates a list of convos *within each packet set*
		3.1) testing for convo membership is a method within each headerfield class
		3.2) (can make this an option later, initially we can just always group on all protocols that support it) user specifies which protocols to do convo testing for
		3.3) apply convo testing for lower level protocols first - so, say, IP4 gets defragged first, then tcp fragments get combined
			3.3.1) so that means each there will be a separate pass through the packets for each layer
				3.3.1.1) 
			3.3.2) 
		3.4) a convo is
			3.4.1) a special case of a packet
			3.4.2) one (or more??) of the packet header members will be populated with the common header information
			3.4.3) instead of data, there will be a list of pointers to member packets (Which can themselves be convos)
	4) display
		4.1) tree view of groups
		4.2) datagrid of groups
		4.3) datagrid of packets
		4.4) datagrid columns will be a select few columsn we will want to use for sorting, e.g., timestamps, macs, ip addresses and protocols
		4.5) the properties backing the DG columns will be properties at the packet level - protcol constructors will populate these packet-level properties when they construct the header	














try vs pro free trial - performance profiling tools, what else???

git - how to roll back????
    - how to open a branch to an earlier version so i can just look at how it used to work


timestamp value converter for display

hex data view for data portion of each packet (as detail view in datagrid?)

tool to summarize column of packet data grid with counts (sort by count, or by item value)
	difficulty is how to extract a list of the values of a certain field from setlist.sets.pkts
	the datagrid column can give the binding, which contains the headerfield path as a string
	is there a method that will automatically get the values in a datagrid column (try internet search - was not online when tried this)
	can reflection use the path string to access the properties of pkts?  (probably yes, but is it fast enough - see p. 781 of c# in a nutshell)


aggregate IP4 fragments
	handle dumps that do not include all fragments

add support for more protocols
	tcp
	udp
	icmp
	icmp router discovery (rfc 1256 - is this still current?)
	icmp other extensions

group "conversations"
	examples of conversations:
		arp request and response
		tcp session

	definition of a conversation:
		-
		-

	how a conversation should be presented in gui
		- allow for expand/collapse??

	how to handle incomplete conversation





remove (or comment out) facility to view packets excluded via quickfilter
	separate datagrid
	qfexcluded packet set in mainwindow
	logic in file read method that puts an "excluded" packet into separate packet set


handle IP4 "options" field


quickfilters
	test performance - if too slow, try optimizing by
		ordering filters
		structuring into dictionaries (one dict for each mask value) using comparevalue as the key

	maybe also add other criteria, like ether type/len field (to exclude ipv6 noise, for example)

	dialog improvements
		checkboxes to toggle aliasing of mac/ip addresses
		drag and drop
		add/delete row respect multi selections






